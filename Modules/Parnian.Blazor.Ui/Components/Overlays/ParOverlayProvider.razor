@implements IDisposable
<div class="par-overlays">
    @foreach (var overlay in OverlayService.GetOverlays())
    {
        <div class="par-overlay">
            @overlay.ChildContent
        </div>
    }
</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    [Inject] public ParOverlayService OverlayService { get; set; } = default!;

    protected override void OnInitialized()
    {
        OverlayService.Added += OverlayServiceOnAdded;
        OverlayService.Removed += OverlayServiceOnRemoved;
        OverlayService.Changed += OverlayServiceOnChanged;;
        base.OnInitialized();
    }

    private void OverlayServiceOnChanged(object? sender, ParOverlay e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OverlayServiceOnRemoved(object? sender, ParOverlay e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OverlayServiceOnAdded(object? sender, ParOverlay e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        OverlayService.Added -= OverlayServiceOnAdded;
        OverlayService.Removed -= OverlayServiceOnRemoved;
    }
}